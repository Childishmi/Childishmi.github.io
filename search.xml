<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[初识Java_第三天]]></title>
    <url>%2F2017%2F07%2F17%2F%E5%88%9D%E8%AF%86Java_%E7%AC%AC%E4%B8%89%E5%A4%A9_2017-7-17%2F</url>
    <content type="text"><![CDATA[类与对象成员变量与局部变量 (๑•ω•̀๑） 成员变量（类体中变量定义部分所定义的变量）： 在整个类内有效，定义时有默认值. 静态变量（类变量） static 实例变量（实例成员变量） 其他 局部变量（在方法体中定义的变量和方法的参数）： 只在方法内有效，定义时没有默认值(因此在使用局部变量之前,必须保证局部变量有具体的值). 如果局部变量的名字与成员变量的名字相同，则成员变量被隐藏，即该成员变量在这个方法内暂时失效。eg1: class Tom { int x = 10,y; void f() { int x = 5; y = x+x; //y得到的值是10，不是20。 //如果方法f 中没有“int x=5;”，y的值将是20 } } 如果想在该方法中使用被隐藏的成员变量，必须使用关键字thiseg2: class Tom { int x = 10,y; void f() { int x = 5; y = x+this.x; //y得到的值是15 } } 方法 (๑´ㅂ`๑) 类方法（有static）eg: static int add(int a,int b){ return a+b;} 只能对类变量进行操作, 只能调用该类的类方法 实例方法 既能对类变量操作也能对实例变量操作, 可以调用该类中的其他方法 定义类时需要注意 ٩(๑❛ᴗ❛๑)۶ 对成员变量的操作只能放在方法中，在声明成员变量时可同时赋初值，但是不可以在类体中有单独的赋值语句，但局部变量必须赋初值。eg: class A { int a=12; //ok int b; b=12; //error } 创建对象 ( • ̀ω•́ ) 对象的声明 为对象分配变量 eg1： class A { float height,weight; String head, ear; void speak(String s) { System.out.println(s); } } public class Example4_1 { public static void main(String args[]) { A zhubajie; //声明对象 zhubajie = new A(); //为声明的对象分配变量 } } eg2: class Point { int m_x,m_y; Point(int x,int y) { m_x=x; m_y=y; } } public class Example4_2 { public static void main(String args[]) { Point p1,p2; //声明对象p1和p2 p1=new Point(10,10); //为对象分配变量(使用new和类中的构造方法) p2=new Point(23,35); //为对象分配变量(使用new和类中的构造方法) } } package ٩(๑❛ᴗ❛๑)۶为源文件中声明的类指定包名。package tom.jiafei; //程序如果使用了包语句…\tom\jiafei //那么存储文件的目录结构中必须包含该结构 eg: E:\chapter1\tom\jiafei 并且要将源文件编译得到的类的字节码文件保存在目录E:\chapter1\tom\jiafei中（源文件可以任意存放） 运行有包名的主类 主类的包名是tom.jiafei，那么主类的字节码一定存放在…\tom\jiefei目录中，运行时必须到tom\jiefei的上一层（即tom的父目录）目录中去运行主类。 tom\jiefei的上一层目录是chapter1，那么，必须如下格式来运行：E:\chapter1\java tom.jiafei.主类名 E:\chapter1&gt;javac tom\jiafei\Example4_15.java E:\chapter1&gt;java tom.jiafei.Example4_15 import (๑•ω•̀๑） 如果一个类想要使用的那个类 和它不在一个包中，要使用import语句。 import java.util.*; //表示引入java.util包中所有的类 Java.util包包含有用的数据类型类 引入自定义包中的类 使用import语句引入非类库中有包名的类，如：import tom.jiafei.*; //E:\chapter1\sohu\com\Triangle.java package sohu.com; public class Triangle { double sideA,sideB,sideC; public double getArea() { double p = (sideA+sideB+sideC)/2.0; double area = Math.sqrt(p*(p-sideA)*(p-sideB)*(p-sideC)) ; return area; } public void setSides(double a,double b,double c) { sideA = a; sideB = b; sideC = c; } } //E:\chapter1\hello\nihao\Example4_18.java package hello.nihao; import sohu.com.Triangle; public class Example4_18 { public static void main(String args[]) { Triangle tri = new Triangle(); tri.setSides(30,40,50); System.out.println(tri.getArea()); } } E:\chapter1&gt;javac hello\nihao\Example4_18.java E:\chapter1&gt;java hello.nihao.Example4_18 600.0 private &amp; public等 (๑•ω•̀๑） public class定义的类-&gt;public类 不加public修饰的类 -&gt;友好类 private 某个类在另外一个类中创建对象后，如果不希望该对象直接访问（通过“.”运算符来操作）自己的成员变量，就应当将该成员变量访问权限设置为private 作用域 当前类 同一package 子孙类 其他package public yes yes yes yes protected yes yes yes no friendly yes yes no no private yes no no no 对基本数据类型的封装 (๑•ω•̀๑） java.lang包 Byte、Integer、Short、Long、Float、Double和Character类 Double对象调用doubleValue()方法可以返回该对象中含有的double型数据。 eg: double m1=d1.doubleValue(); if(Character.isLowerCase(a[i])) a[i]=Character.toUpperCase(a[i]); 对象数组 (๑•ω•̀๑）Student [] stu = new Student[10]; //数组的元素是对象Student stu1,stu2… 这些对象目前都是空对象.stu[i]=new Student(); //使用数组stu中的对象之前，应当创建数组所包含的对象。 其他 (๑•ω•̀๑）反编译和文档生成器 javap.exe将字节码反编译为源码，以便查看源码类中的public方法名字和public成员变量的名字 javap Example4_20.class Compiled from "Example4_20.java" public class Example4_20 { public Example4_20(); public static void main(java.lang.String[]); } javadoc.exe可以制做源文件类结构的html格式文档 javadoc Example4_20.java 正在加载源文件Example4_20.java... 正在构造 Javadoc 信息... 标准 Doclet 版本 1.8.0_131 正在构建所有程序包和类的树... 正在生成.\Example4_20.html... 正在生成.\package-frame.html... 正在生成.\package-summary.html... 正在生成.\package-tree.html... 正在生成.\constant-values.html... 正在构建所有程序包和类的索引... 正在生成.\overview-tree.html... 正在生成.\index-all.html... 正在生成.\deprecated-list.html... 正在构建所有类的索引... 正在生成.\allclasses-frame.html... 正在生成.\allclasses-noframe.html... 正在生成.\index.html... 正在生成.\help-doc.html... 体验٩(•̤̀ᵕ•̤́๑) 加油]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>2017Summer</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识Java_第二天]]></title>
    <url>%2F2017%2F07%2F16%2F%E5%88%9D%E8%AF%86Java_%E7%AC%AC%E4%BA%8C%E5%A4%A9_2017-7-16%2F</url>
    <content type="text"><![CDATA[8种基本数据类型 (๑•ω•̀๑） 逻辑类型：boolean整数类型：byte、short、int、long字符类型：char浮点类型：float、double long型常量用后缀L来表示 float常量后面必须要有后缀f或F 对于double常量，后缀有“d”或“D”，但允许省略后缀. 对于byte型内存分配给1个字节，占8位 . 对于short型变量，内存分配给2个字节，占16位. 对于char型变量，内存分配给2个字节，占16位 . 对于int型变量，内存分配给4个字节（byte）,占32位. 对于float型变量，内存分配给4个字节，占32位。 对于long型变量，内存分配给8个字节，占64位. 对于double型变量，内存分配给8个字节，占64位 . 输入、输出数据 (๑´ㅂ`๑)int number = 0; Scanner reader = new Scanner(System.in); number = reader.nextInt(); System.out.println(); //输出数据后换行 System.out.print(); //输出数据后不换行 System.out.printf(&quot;%d,%f&quot;,12, 23.78); %s输出字符串数据 如果需要输出的字符串的长度较长，可以将字符串分解成几部分，然后使用并置符号：“+”将它们首尾相接 eg: public class Hello2{ public static void main(String args[]){ System.out.println("你好，"+ "很高兴认识你"); } } 数组 ٩(๑❛ᴗ❛๑)۶ 为数组分配元素的格式如下：数组名 = new 数组元素的类型[数组元素的个数]; 数组的声明和分配空间可以在声明时同时完成：float boy []=new float[4]; length字段的使用 对于一维数组，“数组名.length”的值就是数组中元素的个数； boy.length==4 对于二维数组“数组名.length”的值是它含有的一维数组的个数 eg：int [][] a = new int[3][8]; a.length的值是3. a[0].length，a[1].length，a[2].length的值是8 数组属于引用型变量，两个相同类型的数组如果具有相同的引用，它们就有完全相同的元素。 折半法 (๑•ω•̀๑）从小到大排序的数组，只要判断数据是否和数组中间的值相等，如果不相等，当该数据小于数组中间元素的值，就在数组的前一半数据中继续折半找，否则就在数组的后一半数据中继续折半找，可以比较快地判断该数据是否在数组中。eg: import java.util.*; class Example2_5 { public static void main(String args[]) { int start=0,end,middle; int a[] = {12,45,67,89,123,-45,67}; int N = a.length; for(int i=0; i&lt;N; i++) { //选择法排序数组 for(int j = i+1; j &lt; N;j++){ if(a[j] &lt; a[i]){ int t = a[j]; a[j] = a[i]; a[i] = t; } } } System.out.println(Arrays. toString(a)); Scanner scanner = new Scanner(System.in); System.out.println(&quot;输入整数，程序判断该整数是否在数组中:&quot;); int number = scanner.nextInt(); int count =0 ; end = N; middle=(start+end)/2; while(number!=a[middle]){ if(number&gt;a[middle]) start=middle; else if(number&lt;a[middle]) end=middle; middle=(start+end)/2; count++; if(count&gt;N/2) break; } if(count&gt;N/2) System.out.printf(&quot;%d不在数组中.\n&quot;,number); else System.out.printf(&quot;%d在数组中.\n&quot;,number); } } 其它 (๑•ω•̀๑）标识符由字母、下划线、美元符号和数字组成，并且第一个字符不能是数字字符(关键字不能做标识符). 体验٩(•̤̀ᵕ•̤́๑) 环境总是出错，不会配置 public static void main(String args[]) //（）中的东西不能省略 System.out.printf//S大写 汗= = 加油]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>2017Summer</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识Java_第二天2]]></title>
    <url>%2F2017%2F07%2F16%2F%E5%88%9D%E8%AF%86Java_%E7%AC%AC%E4%BA%8C%E5%A4%A92_2017-7-16%2F</url>
    <content type="text"><![CDATA[#运算符、表达式和语句 自增、自减运算符：++，– (๑•ω•̀๑） ++x 表示在使用x之前，先使x的值增1。 x++ 表示在使用x之后，使x的值增1。 eg: int f=2; int m=2; int x=(fm++)+m; //x=7; 22 +3 int y=(f++m)+m; //y=9; 23 +3 instanceof (๑´ㅂ`๑) 左-对象；右-类。当左面的对象是右面的类或子类创建的对象时，该运算符结果是true ，否则是false。eg: String s=new String(“abc”); if(s instanceof String) System.out.println(“s is a string”); switch ٩(๑❛ᴗ❛๑)۶ switch 语句是单条件多分支的开关语句 表达式的值必须是：byte，short，int，char。 不能是String或者long型的（与int兼容类型）。 必须要有break语句 default语句放的位置是任意的。 break &amp; continue ( • ̀ω•́ )eg： public class Example3_7 { public static void main(String args[]) { int sum=0,i,j; for( i=1;i]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>2017Summer</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识Java_第一天]]></title>
    <url>%2F2017%2F07%2F15%2F%E5%88%9D%E8%AF%86Java_%E7%AC%AC%E4%B8%80%E5%A4%A9_2017-7-15%2F</url>
    <content type="text"><![CDATA[特点 (๑•ω•̀๑） Java与平台无关 （字节码由Java虚拟机负责解释运行，即Java虚拟机负责将字节码翻译成本地计算机的机器码，并将机器码交给本地的操作系统来运行。 ） 多线程 动态 （基本组成单元就是类，自己编写的+从类库中引入的，而类又是运行时动态装载的，这就使得Java可以在分布环境中动态地维护程序及类库。 ） 安装+配置环境变量 (๑´ㅂ`๑) Java SE平台 百度搜素“[jdk1.8官方下载][1]” 选择适合版本 jdk-8u131-windows-x64.exe 选择安装路径界面。 （为了便于今后设置环境变量，修改默认的安装路径为：E:\jdk1.8 ） JDK平台提供的Java编译器（javac.exe）和Java解释器（java.exe）位于Java安装目录的\bin文件夹中. 右键“计算机”-“属性”-“系统特性”-“高级属性设置”-“环境变量”-添加系统环境变量JAVA_HOME，让该环境变量的值是JDK目录结构的根目录，例如E:\jdk1.8 “环境变量”-“系统变量(S)”-path-“编辑(I) ”-%JAVA_HOME%\bin;C………… 开发步骤 ٩(๑❛ᴗ❛๑)۶ 编写源文件:扩展名必须是 .java。 编译Java源程序:用Java编译器（javac.exe）编译源文件，得到字节码文件。 运行Java程序:使用Java解释器（java.exe）来解释执行字节码文件。 实战1 ( • ̀ω•́ )eg1： 用文本编辑器编辑代码。 如果源文件中有多个类，那么只能有一个类是public类；如果有一个类是public类，那么源文件的名字必须与这个类的名字完全相同，扩展名是java。 一个Java应用程序必须有一个类含有public static void main（String args[ ]）方法，称这个类是应用程序的主类。 Hello.java是由两个名字分别为Hello和Student的类组成。 Hello.java。我们将Hello.java保存到E:\chapter1文件夹中。 public class Hello { public static void main (String args[]) { System.out.println("大家好!"); System.out.println("Nice to meet you"); Student stu = new Student(); stu.speak("We are students"); } } class Student { public void speak(String s) { System.out.println(s); } } E:\chapter1&gt; javac Hello.java （使用javac编译源文件） E:\chapter1> java Hello （使用java解释器运行程序） 反编译 ٩(๑❛ᴗ❛๑)۶ JDK提供的反编译器是javap.exe 如果想反编译例子1中的Hello.class，可使用javap命令：javap Hello.class ，例如：E:\chapter1> javap Hello.class 如果想反编译类库中的Date类（其包名是java.util）Date.class，可使用javap命令：javap java.util.Date.class，例如：E:\chapter1> javap java.util.Date.class 其它 (๑•ω•̀๑） 单行注释 // 多行注释 / / 体验٩(•̤̀ᵕ•̤́๑) 下载安装+配置环境变量比较麻烦 cmd写+编译+跑出第一个Java还是很神奇的 加油]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>2017Summer</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Our story begins]]></title>
    <url>%2F2017%2F04%2F02%2FOur%20story%20begins%2F</url>
    <content type="text"><![CDATA[《十二》❤《十二》里这样唱： 你是 九月夏天滚烫的浪 你是 忽而大雨瓢泼的向往 你是 飞越山川河流的大梦一场 你是 整夜白雪茫茫的路旁 你是 南半球的年少风光 ☂你是无言 你是对望 你是 隔着落地窗的翅膀 你是 小城艳阳高照的清香 你是 无力抗拒不停追逐的磁场 你是 傍晚落日余晖的向往 你是 我不能拥抱的短暂理想 你是旅途 你是故乡 ✿ 你是 不愿停下的难忘情长 你是 逃离废墟的路途茫茫 你是 忽明忽暗的不悔时光 你是 一束生命全力绽放 你是 我认真书写的一笔一划 你是 几缕发丝的错误生长 ➷你是 解药 你是营养 你是 四海为家的回头牵肠 你是 我独享的遗憾和渴望 你是 我不愿醒来的梦啊 柔情一场 ☁我的名字叫 难忘 ❁ ❤ 此文写给小星星（个咋知嘚仨）ヾ(o◕∀◕)ﾉヾ About this article:❤ “和你在一起的时光嘛=w= 总是很开心a ” “废话要是和我在一起不开心那我岂不是太失败了/doge” 所以 为你而写 这繁华一世w ❀ by 罐罐]]></content>
      <categories>
        <category>生活</category>
      </categories>
  </entry>
</search>